///////////////-----------Circular Queues Implementation ----------//////////
/*
  Submission by :: Paul George
*/
/////////////////////---------Headers && definitions----------///////////////
#include"stdio.h"
#include"stdlib.h"
#include"string.h"
#define MAX 10
/////////////////////------Function Prototypes -------------//////////////////
int add(int *array,int*head,int*rear,int element){
    if (*head-*rear==MAX){
        printf("\nfull");
    }
    else{
        *head=*head+1;
        array[*head%MAX]=element;
        return 1;
        }
    }

int delete(int *array,int*head,int*rear){
    if(*head==*rear){
        return 0;
        }
    else{
        *rear=*rear+1;
        return 1;
        }
    }
    
void debug(int *array,int head,int rear){
    int i =rear+1;
    printf("\nQueue is :");
    while(i!=head+1){
        printf("%d ",array[i%MAX]);
        i++;
        }
    }
//////////////-----------------MAIN----------------------/////////////////////
int main(int argc,char* argv[]){
	if(argc<2){
		printf("Incorrect Usage ! Please Enter path to instructions!");
		return 0;
		}
	FILE* commands=fopen(argv[1],"r");
	int array[MAX];
	int head;
	int rear;
	head =-1;
	rear =-1;
	char command[11];
	int element;
	while(!feof(commands)){
	    fscanf(commands,"%s",command);
	    if(strcmp(command,"Insert")==0){
	        fscanf(commands,"%d",&element);
	        if (add(array,&head,&rear,element)==1){
	            printf("\nInserting %d",element);
	            debug(array,head,rear);
	            }
	    }
	    else{
	        if(delete(array,&head,&rear)==1){
	            printf("\nRemove returned :: %d ",array[(rear%MAX)]);
	            }
	        else{
	            printf("\n Remove FAILED due to queue empty");
	            }
	        }
	    }
	debug(array,head,rear);
	return 0;
    }
////////////////----------------EOF------------------------//////////////////////	
